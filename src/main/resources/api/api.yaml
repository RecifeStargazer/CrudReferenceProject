swagger: "2.0"
info:
  description: "This api refers to Compasso's test"
  version: "1.0.0"
  title: "Crud API"
  termsOfService: "tbd"
  contact:
    email: "carlos.swamy@gmail.com"
host: "teste"
basePath: "/v1"
tags:
- name: "Cadastro"
  description: "Operações de cadastro"
- name: "Consulta"
  description: "Operações consulta"
#  externalDocs:
#    description: "Find out more about our store"
#    url: "http://swagger.io"
schemes:
- "https"
- "http"

paths:

  /cadastro/cidade:
    post:
      tags:
      - "Cadastro"
      summary: "Adiciona nova cidade"
      description: "Adiciona nova cidade à base de dados"
      operationId: "addCidade"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "cidade"
        description: "objeto cidade"
        required: true
        schema:
          $ref: "#/definitions/CidadeDTO"
      responses:
        200:
          description: "Cidade cadastrada com sucesso"
          schema:
            $ref: "#/definitions/CidadeDTO"
            
  /cadastro/cliente:
    post:
      tags:
      - "Cadastro"
      summary: "Adiciona novo cliente"
      description: "Adiciona novo cliente à base de dados"
      operationId: "addCliente"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "cliente"
        description: "objeto cliente"
        required: true
        schema:
          $ref: "#/definitions/ClienteDTO"
      responses:
        200:
          description: "Cliente cadastrado com sucesso"
          schema:
            $ref: "#/definitions/ClienteDTO"
  
  /cadastro/{id}/cliente/editar:
    put:
      tags:
      - "Cadastro"
      summary: "Edita cliente"
      description: "Edita cliente"
      operationId: "editCliente"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id do cliente a ser editado"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "cliente"
        description: "objeto de cliente"
        required: true
        schema:
          $ref: "#/definitions/ClienteDTO"
      responses:
        200:
          description: "Perfil alterado com sucesso"
          schema:
            $ref: "#/definitions/ClienteDTO"
            
  /cadastro/{id}/cliente/deletar:
    delete:
      tags:
      - "Cadastro"
      summary: "Exclui cliente"
      description: "Exclui cliente"
      operationId: "deleteCliente"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id do cliente a ser excluido"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Id inválido"
        "404":
          description: "cliente"
              
  /consulta/cidade/{nome_cidade}:
    get:
      tags:
      - "Consulta"
      summary: "Retorna uma lista de cidades"
      description: "Retorna uma lista cidades por nome do banco de dados"
      operationId: "getListaCidadesPorNome"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nome_cidade"
        in: "path"
        description: "nome da cidade que será retornada"
        required: true
        type: "string"
      responses:
        200:
          description: "Lista recuperada com sucesso"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CidadeDTO"
              
  /consulta/cidade/{nome_estado}/buscarCidadesPorEstado:
    get:
      tags:
      - "Consulta"
      summary: "Retorna lista de cidades"
      description: "Retorna lista com todas as cidades por estado do banco de dados"
      operationId: "getListaCidadesPorEstado"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nome_estado"
        in: "path"
        description: "nome do estado da cidade que será retornada"
        required: true
        type: "string"
      responses:
        200:
          description: "Lista recuperada com sucesso"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/CidadeDTO"
              
  /consulta/cliente/{id_cliente}:
    get:
      tags:
      - "Consulta"
      summary: "Retorna um cliente"
      description: "Retorna um cliente por id caso exista na base de dados"
      operationId: "getClientePorId"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id_cliente"
        in: "path"
        description: "Id do cliente a ser recuperado"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Cliente recuperado com sucesso"
          schema:
            $ref: "#/definitions/ClienteDTO"
            
  /consulta/cliente/{nome_cliente}/buscarPorNome:
    get:
      tags:
      - "Consulta"
      summary: "Retorna lista de clientes"
      description: "Retorna lista com todos os clientes por nome do banco de dados"
      operationId: "getListaClientePorNome"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "nome_cliente"
        in: "path"
        description: "nome dx(s) cliente(s) que serão retornados"
        required: true
        type: "string"
      responses:
        200:
          description: "Lista recuperada com sucesso"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ClienteDTO"
    
definitions:

  ClienteDTO:
    type: "object"
    description: "Data transfer object para cliente. Uma cidade pode ser cadastrada através do cliente, caso não exista no banco. A unicidade do cliente é dada pelo id."
    properties:
      id:
        type: "integer"
        format: "int64"
      nome: 
        type: "string"
      idade:
        type: "integer"
        format: "int32"
      dataDeAniversario: 
        type: "string"
        description: "data no formato DD/MM/YYYY"
      sexo:
        type: "string"
        description: "MASCULINO  ou FEMININO"
      cidade:
        $ref: "#/definitions/CidadeDTO"
        
  CidadeDTO:
    type: "object"
    description: "Data transfer object para cidade. Uma cidade pode ser cadastrada através do cliente, caso não exista no banco. O nome da cidade e o estado da cidade formam uma chave única."
    properties: 
      cidade: 
        type: "string"
      estado:
        type: "string"
    
  